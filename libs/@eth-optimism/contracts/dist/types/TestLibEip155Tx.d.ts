/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestLibEip155TxInterface extends ethers.utils.Interface {
  functions: {
    "decode(bytes,uint256)": FunctionFragment;
    "encode(tuple,bool)": FunctionFragment;
    "hash(tuple)": FunctionFragment;
    "sender(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [
      {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [
      {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sender",
    values: [
      {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;

  events: {};
}

export class TestLibEip155Tx extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestLibEip155TxInterface;

  functions: {
    decode(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        nonce: BigNumber;
        gasPrice: BigNumber;
        gasLimit: BigNumber;
        to: string;
        value: BigNumber;
        data: string;
        v: number;
        r: string;
        s: string;
        chainId: BigNumber;
        recoveryParam: number;
        isCreate: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: string;
        6: number;
        7: string;
        8: string;
        9: BigNumber;
        10: number;
        11: boolean;
      };
    }>;

    "decode(bytes,uint256)"(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        nonce: BigNumber;
        gasPrice: BigNumber;
        gasLimit: BigNumber;
        to: string;
        value: BigNumber;
        data: string;
        v: number;
        r: string;
        s: string;
        chainId: BigNumber;
        recoveryParam: number;
        isCreate: boolean;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: string;
        4: BigNumber;
        5: string;
        6: number;
        7: string;
        8: string;
        9: BigNumber;
        10: number;
        11: boolean;
      };
    }>;

    encode(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "encode(tuple,bool)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hash(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "hash(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    sender(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "sender(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  decode(
    _encoded: BytesLike,
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    nonce: BigNumber;
    gasPrice: BigNumber;
    gasLimit: BigNumber;
    to: string;
    value: BigNumber;
    data: string;
    v: number;
    r: string;
    s: string;
    chainId: BigNumber;
    recoveryParam: number;
    isCreate: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
    6: number;
    7: string;
    8: string;
    9: BigNumber;
    10: number;
    11: boolean;
  }>;

  "decode(bytes,uint256)"(
    _encoded: BytesLike,
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    nonce: BigNumber;
    gasPrice: BigNumber;
    gasLimit: BigNumber;
    to: string;
    value: BigNumber;
    data: string;
    v: number;
    r: string;
    s: string;
    chainId: BigNumber;
    recoveryParam: number;
    isCreate: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
    6: number;
    7: string;
    8: string;
    9: BigNumber;
    10: number;
    11: boolean;
  }>;

  encode(
    _transaction: {
      nonce: BigNumberish;
      gasPrice: BigNumberish;
      gasLimit: BigNumberish;
      to: string;
      value: BigNumberish;
      data: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      chainId: BigNumberish;
      recoveryParam: BigNumberish;
      isCreate: boolean;
    },
    _includeSignature: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "encode(tuple,bool)"(
    _transaction: {
      nonce: BigNumberish;
      gasPrice: BigNumberish;
      gasLimit: BigNumberish;
      to: string;
      value: BigNumberish;
      data: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      chainId: BigNumberish;
      recoveryParam: BigNumberish;
      isCreate: boolean;
    },
    _includeSignature: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  hash(
    _transaction: {
      nonce: BigNumberish;
      gasPrice: BigNumberish;
      gasLimit: BigNumberish;
      to: string;
      value: BigNumberish;
      data: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      chainId: BigNumberish;
      recoveryParam: BigNumberish;
      isCreate: boolean;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "hash(tuple)"(
    _transaction: {
      nonce: BigNumberish;
      gasPrice: BigNumberish;
      gasLimit: BigNumberish;
      to: string;
      value: BigNumberish;
      data: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      chainId: BigNumberish;
      recoveryParam: BigNumberish;
      isCreate: boolean;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  sender(
    _transaction: {
      nonce: BigNumberish;
      gasPrice: BigNumberish;
      gasLimit: BigNumberish;
      to: string;
      value: BigNumberish;
      data: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      chainId: BigNumberish;
      recoveryParam: BigNumberish;
      isCreate: boolean;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "sender(tuple)"(
    _transaction: {
      nonce: BigNumberish;
      gasPrice: BigNumberish;
      gasLimit: BigNumberish;
      to: string;
      value: BigNumberish;
      data: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
      chainId: BigNumberish;
      recoveryParam: BigNumberish;
      isCreate: boolean;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    decode(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      gasPrice: BigNumber;
      gasLimit: BigNumber;
      to: string;
      value: BigNumber;
      data: string;
      v: number;
      r: string;
      s: string;
      chainId: BigNumber;
      recoveryParam: number;
      isCreate: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: number;
      7: string;
      8: string;
      9: BigNumber;
      10: number;
      11: boolean;
    }>;

    "decode(bytes,uint256)"(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      gasPrice: BigNumber;
      gasLimit: BigNumber;
      to: string;
      value: BigNumber;
      data: string;
      v: number;
      r: string;
      s: string;
      chainId: BigNumber;
      recoveryParam: number;
      isCreate: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: number;
      7: string;
      8: string;
      9: BigNumber;
      10: number;
      11: boolean;
    }>;

    encode(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "encode(tuple,bool)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    hash(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "hash(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    sender(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "sender(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decode(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decode(bytes,uint256)"(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encode(tuple,bool)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hash(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sender(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sender(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decode(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decode(bytes,uint256)"(
      _encoded: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encode(tuple,bool)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      _includeSignature: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hash(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sender(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sender(tuple)"(
      _transaction: {
        nonce: BigNumberish;
        gasPrice: BigNumberish;
        gasLimit: BigNumberish;
        to: string;
        value: BigNumberish;
        data: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
        chainId: BigNumberish;
        recoveryParam: BigNumberish;
        isCreate: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
